import { addDocument, attachDocument } from "../../../tools/WSDocuments";

export const getFileType = (filename) => {
  const lower = filename.toLowerCase();

  if (lower.endsWith(".pdf")) return "pdf";
  if (lower.endsWith(".png")) return "png";
  return "jpeg"; // fallback default
};

export const toBase64 = (file) =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result;
      const base64 = result.split(",")[1];
      resolve(base64);
    };
    reader.onerror = reject;
  });

export const pickSingleFile = async () => {
  const [fileHandle] = await window.showOpenFilePicker({
    types: [
      {
        description: "Images and PDFs",
        accept: {
          "image/jpeg": [".jpg", ".jpeg"],
          "image/png": [".png"],
          "application/pdf": [".pdf"],
        },
      },
    ],
    multiple: false,
  });

  return fileHandle.getFile();
};

export const uploadAndAttachDocument = async (file, entity, code) => {
  const base64 = await toBase64(file);

  const docRequest = {
    DOCUMENTID: {
      DOCUMENTCODE: "AUTOGENERATED",
      ORGANIZATIONID: {
        ORGANIZATIONCODE: "*",
        DESCRIPTION: "Default organization",
        entity: null,
      },
      DESCRIPTION: file.name,
    },
    FILE: file.name,
    DOCUMENTTYPE: {
      TYPECODE: "U",
      DESCRIPTION: "Uploaded document",
      entity: null,
    },
    DocumentAttachment: {
      FILECONTENT: base64,
    },
    autoid: "true",
  };

  const docResponse = await addDocument(docRequest);
  const documentId = docResponse?.body?.Result?.ResultData?.DOCUMENTID?.DOCUMENTCODE;

  if (!documentId) {
    throw new Error("No DOCUMENTID returned from addDocument");
  }

  await attachDocument(documentId, entity, code);

  return {
    doccode: documentId,
    docfilepath: file.name,
    docdescription: file.name,
    base64,
  };
};
