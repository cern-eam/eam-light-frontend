import { addDocument, attachDocument } from "../../../tools/WSDocuments";
import { format } from "date-fns";

export const getFileType = (filename) => {
  const lower = filename.toLowerCase();

  if (lower.endsWith(".pdf")) return "pdf";
  if (lower.endsWith(".png")) return "png";
  return "jpeg"; // fallback default
};

export const toBase64 = (file) =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result;
      const base64 = result.split(",")[1];
      resolve(base64);
    };
    reader.onerror = reject;
  });

export const pickSingleFile = () =>
  new Promise((resolve, reject) => {
    if ('showOpenFilePicker' in window) {
      // Chromium-based browsers
      window
        .showOpenFilePicker({
          types: [
            {
              description: "Images and PDFs",
              accept: {
                "image/jpeg": [".jpg", ".jpeg"],
                "image/png": [".png"],
                "application/pdf": [".pdf"],
              },
            },
          ],
          multiple: false,
        })
        .then(async ([handle]) => {
          const file = await handle.getFile();
          resolve(file);
        })
        .catch(reject);
    } else {
      // Fallback for Firefox/Safari
      const input = document.createElement("input");
      input.type = "file";
      input.accept = ".jpg,.jpeg,.png,.pdf";
      input.style.display = "none";

      input.onchange = () => {
        if (input.files && input.files.length > 0) {
          resolve(input.files[0]);
        } else {
          reject(new DOMException("No file selected", "AbortError"));
        }
      };

      input.onerror = reject;

      document.body.appendChild(input);
      input.click();
      // Clean up
      setTimeout(() => document.body.removeChild(input), 0);
    }
  });


export const uploadAndAttachDocument = async (file, entity, code) => {
  const base64 = await toBase64(file);

  const timestamp = format(new Date(), 'yyyyMMdd-HHmmss');
  const renamedFile = file.name.replace(/(.*)(\.[^.]*)$/, `$1_${timestamp}$2`);

  const docRequest = {
    DOCUMENTID: {
      DOCUMENTCODE: "AUTOGENERATED",
      ORGANIZATIONID: {
        ORGANIZATIONCODE: "*",
        entity: null,
      },
      DESCRIPTION: file.name,
    },
    FILE: renamedFile,
    DOCUMENTTYPE: {
      TYPECODE: "U",
      entity: null,
    },
    DocumentAttachment: {
      FILECONTENT: base64,
    },
    autoid: "true",
  };

  const docResponse = await addDocument(docRequest);
  const documentId = docResponse?.body?.Result?.ResultData?.DOCUMENTID?.DOCUMENTCODE;

  if (!documentId) {
    throw new Error("No DOCUMENTID returned from addDocument");
  }

  await attachDocument(documentId, entity, code);

  return {
    doccode: documentId,
    docfilepath: file.name,
    docdescription: file.name,
    base64,
  };
};
